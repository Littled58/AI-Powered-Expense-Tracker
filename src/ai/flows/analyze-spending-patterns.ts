// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered spending pattern analysis flow.
 *
 * This file defines a Genkit flow that analyzes a list of expenses
 * and identifies spending trends and patterns.
 *
 * - analyzeSpendingPatterns - The main function to analyze patterns.
 * - AnalyzeSpendingPatternsInput - The input type.
 * - AnalyzeSpendingPatternsOutput - The output type.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
import { format } from 'date-fns'; // Import date-fns for formatting

// Define the expense shape within the input schema
const ExpenseSchema = z.object({
    id: z.string(),
    description: z.string(),
    amount: z.number(),
    category: z.string().nullable(),
    date: z.string().describe("Date of the expense in ISO format (e.g., YYYY-MM-DDTHH:mm:ss.sssZ) or a format like 'yyyy-MM-dd'"), // Allow string dates
});

const AnalyzeSpendingPatternsInputSchema = z.object({
  expenses: z.array(ExpenseSchema).describe('A list of user expenses, including description, amount, category, and date.'),
});
export type AnalyzeSpendingPatternsInput = z.infer<typeof AnalyzeSpendingPatternsInputSchema>;

const AnalyzeSpendingPatternsOutputSchema = z.object({
  patterns: z.array(z.string()).describe('A list of identified spending patterns or trends (e.g., "Spending tends to increase on weekends.", "Food expenses saw a 15% increase compared to the previous period.").'),
});
export type AnalyzeSpendingPatternsOutput = z.infer<typeof AnalyzeSpendingPatternsOutputSchema>;

export async function analyzeSpendingPatterns(input: AnalyzeSpendingPatternsInput): Promise<AnalyzeSpendingPatternsOutput> {
  // Format dates before sending to the flow for consistency
  const formattedInput = {
    ...input,
    expenses: input.expenses.map(exp => ({
        ...exp,
        // Format date to YYYY-MM-DD for easier processing by the LLM
        date: format(new Date(exp.date), 'yyyy-MM-dd'),
        category: exp.category ?? 'Uncategorized' // Ensure category is never null
    }))
  };
  return analyzeSpendingPatternsFlow(formattedInput);
}

const analyzeSpendingPatternsPrompt = ai.definePrompt({
  name: 'analyzeSpendingPatternsPrompt',
  input: {
    schema: AnalyzeSpendingPatternsInputSchema.extend({ // Use the extended schema with formatted dates
         expenses: z.array(ExpenseSchema.extend({
             date: z.string().describe("Date of the expense in YYYY-MM-DD format."),
             category: z.string().describe("Category of the expense.") // Category is now required string
         }))
    })
  },
  output: {
    schema: AnalyzeSpendingPatternsOutputSchema,
  },
  prompt: `You are a financial analyst AI. Analyze the following list of expenses and identify key spending patterns, trends, or anomalies.

Expenses Data:
{{#each expenses}}
- Date: {{date}}, Category: {{category}}, Amount: {{amount}}, Description: {{description}}
{{/each}}

Consider factors like:
- Spending changes over time (e.g., increases/decreases in specific categories or overall).
- Comparisons between categories (e.g., highest spending category).
- Time-based patterns (e.g., higher spending on weekends vs. weekdays, specific times of month).
- Significant one-off expenses.

Provide a concise list of 2-4 major patterns or insights based *only* on the provided data. Focus on quantifiable trends where possible (e.g., "Transportation costs increased by X%"). If data is insufficient for a pattern, do not mention it. Phrase insights clearly and directly.

Example Output Format:
{
  "patterns": [
    "Spending on 'Food' is highest on Saturdays.",
    "'Entertainment' expenses decreased by 10% in the last week compared to the week before.",
    "There was a significant one-time expense categorized as 'Travel' on {{some_date}}."
  ]
}
`,
});


const analyzeSpendingPatternsFlow = ai.defineFlow<
  typeof AnalyzeSpendingPatternsInputSchema,
  typeof AnalyzeSpendingPatternsOutputSchema
>(
  {
    name: 'analyzeSpendingPatternsFlow',
    inputSchema: AnalyzeSpendingPatternsInputSchema.extend({ // Use the extended schema with formatted dates
        expenses: z.array(ExpenseSchema.extend({
            date: z.string().describe("Date of the expense in YYYY-MM-DD format."),
            category: z.string().describe("Category of the expense.")
        }))
    }),
    outputSchema: AnalyzeSpendingPatternsOutputSchema,
  },
  async (input) => {
    if (!input.expenses || input.expenses.length < 5) { // Require a minimum number of expenses for meaningful analysis
        return { patterns: ["Not enough data to analyze spending patterns."] };
    }
    try {
        const { output } = await analyzeSpendingPatternsPrompt(input);
        return output || { patterns: ["Could not generate spending patterns."] };
    } catch (error) {
        console.error("Error in analyzeSpendingPatternsFlow:", error);
        return { patterns: ["An error occurred while analyzing spending patterns."] };
    }
  }
);
