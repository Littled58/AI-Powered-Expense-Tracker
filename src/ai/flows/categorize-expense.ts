// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered expense categorization flow.
 *
 * This file defines a Genkit flow that takes an expense description
 * and predicts its category.
 *
 * - categorizeExpense - The main function to categorize an expense.
 * - CategorizeExpenseInput - The input type for the categorizeExpense function.
 * - CategorizeExpenseOutput - The output type for the categorizeExpense function.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';

const CategorizeExpenseInputSchema = z.object({
  description: z.string().describe('The description of the expense provided by the user (e.g., "Weekly groceries", "Coffee with friends", "Train ticket to downtown").'),
});
export type CategorizeExpenseInput = z.infer<typeof CategorizeExpenseInputSchema>;

const CategorizeExpenseOutputSchema = z.object({
  category: z.string().describe('The predicted category for the expense. Should be one of: Food, Transportation, Entertainment, Utilities, Housing, Healthcare, Personal Care, Shopping, Travel, Debt Payment, Education, Gifts & Donations, Other.'),
});
export type CategorizeExpenseOutput = z.infer<typeof CategorizeExpenseOutputSchema>;

export async function categorizeExpense(input: CategorizeExpenseInput): Promise<CategorizeExpenseOutput> {
  return categorizeExpenseFlow(input);
}

const categorizeExpensePrompt = ai.definePrompt({
  name: 'categorizeExpensePrompt',
  input: {
    schema: CategorizeExpenseInputSchema,
  },
  output: {
    schema: CategorizeExpenseOutputSchema,
  },
  prompt: `Analyze the following expense description and categorize it into one of the predefined categories.

Expense Description: {{{description}}}

Categories:
- Food (Groceries, restaurants, coffee shops)
- Transportation (Gas, public transport, ride shares, parking)
- Entertainment (Movies, concerts, streaming services, hobbies)
- Utilities (Electricity, water, internet, phone bill)
- Housing (Rent, mortgage, property taxes, home insurance)
- Healthcare (Doctor visits, prescriptions, health insurance)
- Personal Care (Haircuts, toiletries, gym membership)
- Shopping (Clothing, electronics, household items)
- Travel (Flights, hotels, vacation expenses)
- Debt Payment (Credit card payments, loan payments)
- Education (Tuition, books, courses)
- Gifts & Donations (Charitable donations, gifts for others)
- Other (Anything that doesn't fit neatly into other categories)

Based on the description "{{{description}}}", determine the most appropriate category. Return only the category name. If unsure, use "Other".
`,
});


const categorizeExpenseFlow = ai.defineFlow<
  typeof CategorizeExpenseInputSchema,
  typeof CategorizeExpenseOutputSchema
>(
  {
    name: 'categorizeExpenseFlow',
    inputSchema: CategorizeExpenseInputSchema,
    outputSchema: CategorizeExpenseOutputSchema,
  },
  async (input) => {
    const { output } = await categorizeExpensePrompt(input);

    // Basic validation/fallback
    const validCategories = ["Food", "Transportation", "Entertainment", "Utilities", "Housing", "Healthcare", "Personal Care", "Shopping", "Travel", "Debt Payment", "Education", "Gifts & Donations", "Other"];
    if (!output || !validCategories.includes(output.category)) {
        console.warn(`Invalid category returned: ${output?.category}. Falling back to 'Other'.`);
        return { category: "Other" };
    }

    return output;
  }
);
