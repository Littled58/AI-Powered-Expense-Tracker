// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered finance chatbot flow.
 *
 * This file defines a Genkit flow that acts as a chatbot assistant,
 * answering user questions about their financial data (income, expenses).
 *
 * - financeChatbot - The main function to interact with the chatbot.
 * - FinanceChatbotInput - The input type.
 * - FinanceChatbotOutput - The output type.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';
import { format } from 'date-fns';

// Define the expense shape within the input schema
const ExpenseSchema = z.object({
    id: z.string(),
    description: z.string(),
    amount: z.number(),
    category: z.string().nullable(),
    date: z.string().describe("Date of the expense in ISO format or similar."),
});

const FinanceChatbotInputSchema = z.object({
  userQuery: z.string().describe('The user\'s question or command to the chatbot (e.g., "How much did I spend on food last week?", "What was my biggest expense in May?", "Suggest ways to save on transportation.").'),
  // Provide relevant context for the chatbot
  income: z.number().nullable().describe('The user\'s current monthly income (if available).'),
  expenses: z.array(ExpenseSchema).describe('A list of the user\'s expenses to provide context for answering questions.'),
  // Optional: Previous conversation history for context
  // history: z.array(z.object({ role: z.enum(["user", "bot"]), message: z.string() })).optional().describe("Previous turns in the conversation."),
});
export type FinanceChatbotInput = z.infer<typeof FinanceChatbotInputSchema>;

const FinanceChatbotOutputSchema = z.object({
  response: z.string().describe('The chatbot\'s answer to the user\'s query.'),
});
export type FinanceChatbotOutput = z.infer<typeof FinanceChatbotOutputSchema>;

export async function financeChatbot(input: FinanceChatbotInput): Promise<FinanceChatbotOutput> {
   // Format dates before sending to the flow for consistency
   const formattedInput = {
    ...input,
    expenses: input.expenses.map(exp => ({
        ...exp,
        // Format date to YYYY-MM-DD for easier processing by the LLM
        date: format(new Date(exp.date), 'yyyy-MM-dd'),
        category: exp.category ?? 'Uncategorized' // Ensure category is never null
    }))
  };
  return financeChatbotFlow(formattedInput);
}

const financeChatbotPrompt = ai.definePrompt({
  name: 'financeChatbotPrompt',
  input: {
    schema: FinanceChatbotInputSchema.extend({ // Use the extended schema with formatted dates
         expenses: z.array(ExpenseSchema.extend({
             date: z.string().describe("Date of the expense in YYYY-MM-DD format."),
             category: z.string().describe("Category of the expense.") // Category is now required string
         }))
    }),
  },
  output: {
    schema: FinanceChatbotOutputSchema,
  },
  prompt: `You are a helpful personal finance assistant chatbot. You have access to the user's income and expense data. Answer the user's query based *only* on the provided information. Be concise and helpful.

User's Financial Context:
- Monthly Income: {{#if income}}{{income}}{{else}}Not provided{{/if}}
- Expenses:
{{#each expenses}}
  - Date: {{date}}, Category: {{category}}, Amount: {{amount}}, Description: {{description}}
{{else}}
  No expense data available.
{{/each}}

{{#if history}}
Conversation History:
{{#each history}}
  {{role}}: {{message}}
{{/each}}
{{/if}}

User Query: {{{userQuery}}}

Based on the context above, provide a direct answer to the user's query. If the information needed is not available in the context, state that clearly. Do not make up information. If asked for suggestions (like saving money), provide 1-2 actionable tips relevant to the user's spending if possible based on their data.
`,
});


const financeChatbotFlow = ai.defineFlow<
  typeof FinanceChatbotInputSchema,
  typeof FinanceChatbotOutputSchema
>(
  {
    name: 'financeChatbotFlow',
     inputSchema: FinanceChatbotInputSchema.extend({ // Use the extended schema with formatted dates
        expenses: z.array(ExpenseSchema.extend({
            date: z.string().describe("Date of the expense in YYYY-MM-DD format."),
            category: z.string().describe("Category of the expense.")
        }))
    }),
    outputSchema: FinanceChatbotOutputSchema,
  },
  async (input) => {
    try {
        const { output } = await financeChatbotPrompt(input);
        return output || { response: "Sorry, I couldn't generate a response." };
    } catch (error) {
         console.error("Error in financeChatbotFlow:", error);
         return { response: "Sorry, an error occurred while processing your request." };
    }
  }
);
